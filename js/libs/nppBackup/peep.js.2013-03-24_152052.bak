function peep(params){
	
	//if you give it geo, it will use that, otherwise it will use a default cube

	this.params;
	this.CTRL = new THREE.Object3D();
	this.options = {geo:new THREE.CubeGeometry( 1,1,1,1,1,1 ),color1:0xffffff,color2:0x00ffff,color3:0xffffff,color4:0xffffff,color5:0xffffff};
	
	
	if(params === undefined) this.params = this.options;
	else this.params = params;
	
	//console.log(this.params.color2);
	
	this.geometry = this.params.geo ? this.params.geo : new THREE.CubeGeometry( 1,1,1,1,1,1 );
	
	this.rotColor = 16777215;//Math.random() * 16777215;
	this.hexValue = parseInt(this.rotColor , 10);
	
	this.color1 = (this.params.color1 !== undefined) ? this.params.color1 : this.hexValue;
	this.color2 = (this.params.color2 !== undefined) ? this.params.color2 : this.options.color2;
	this.color3 = (this.params.color3 !== undefined) ? this.params.color3 : this.options.color3;
	this.color4 = (this.params.color4 !== undefined) ? this.params.color4 : this.options.color4;
	this.color5 = (this.params.color5 !== undefined) ? this.params.color5 : this.options.color5;
	
	this.msh = [];
	this.sc = [];
	this.rt = [];
	this.pos = [];
	
}

peep.prototype = {
	
	id:0,
	speed:0,
	q:0,
	//CTRL:new THREE.Object3D(),
	
	
	/*
	//this.geometry is a cube set to a scale of 1,1,1 - this is true of every object that's created
	//It is placed inside a group which scales it to the desired size
	//this group is placed inside a group designated for 'rotation' although you can do anything with it
	//this group is placed inside 'poser' the top group, which is returned
	//each item's name is assigned to the peep object so it can be easily accessed later
	
	//(mesh offset xyz, scale xyz, controller position xyz, name, color)
	*/
	
	part:function(px,py,pz,	sx,sy,sz,	p2x,p2y,p2z,	namer,color){
	
		/*construction of the heirarchy and best practice for parenting
		  the 'pos' of one link should be parented to the 'rt' of its parent - becoming children[1]

		pos
		|
		|
		|[0]           [1]
	    rt-------------pos
		|				|
		|				|
	   sc		   	   rt
		|			    |
		|			    |
	  mesh		       sc
						|
						|
					  mesh
	
		*/
		
		this.material =  new THREE.MeshLambertMaterial( { color:0xffffff, shading: THREE.FlatShading } );
		this.material.color.setHex(color);
		
		var pos = new THREE.Vector3(px,py,pz);
		var scl = new THREE.Vector3(sx,sy,sz);
		var pos2 = new THREE.Vector3(p2x,p2y,p2z);
		
		this.mesh = new THREE.Mesh( this.geometry, this.material );
							
		this.mesh.updateMatrix();
		this.mesh.matrixAutoUpdate = true;					
		this.mesh.position = pos;	
		this.mesh.castShadow = true;	
		
		this.scalar = new THREE.Object3D();	

		this.mesh.name = "mesh_"+namer;
		
		this[ this.mesh.name ] = this.mesh;
		
		this.msh.push(this.rotator);
		
		this.scalar.name = "sc_"+namer;	
		
		this[ this.scalar.name ] = this.scalar;
		
		this.sc.push(this.rotator);

		this.scalar.matrixAutoUpdate = true;					
		this.scalar.add(this.mesh);					
		this.scalar.scale = scl;					
		this.rotator = new THREE.Object3D();

		this.rotator.name = "rt_"+namer;	

		this[ this.rotator.name ] = this.rotator;
		
		this.rt.push(this.rotator);
		
		this.rotator.matrixAutoUpdate = true;					
		this.rotator.add(this.scalar);					
		this.poser = new THREE.Object3D();	
		
		this.poser.name = "pos_"+namer;
		
		this.poser.matrixAutoUpdate = true;					
		this.poser.add(this.rotator);					
		this.poser.position = pos2;	

		this[ this.poser.name ] = this.poser;	
		
		this.pos.push(this.poser);

		return this.poser;
	},
	
	creature:function(mx,my,mz,al,aw,ll,lw,ls,ex,ey,es) {
		
		
		this.CTRL.name = "CTRL";
		this.CTRL.mx = mx;
		this.CTRL.my = my;
		this.CTRL.mz = mz;
		
		this[  this.CTRL.name ] = this.CTRL;
		
		//(mesh offset xyz, scale xyz, controller position xyz, name, color)
		var rflArm = this.part(0,-.5,0,aw,al,aw,0,-al,0,								"rflarm",this.color1);
		var rfuArm = this.part(0,-.5,0,aw,al,aw,	(mx-aw)*.5,(my)*-.5,(mz-aw)*.5,		"rfuarm",this.color1);
		
		var lflArm =	this.part(0,-.5,0,aw,al,aw,0,-al,0,								"lflarm",this.color1);
		var lfuArm =	this.part(0,-.5,0,aw,al,aw,	(mx-aw)*-.5,(my)*-.5,(mz-aw)*.5,	"lfuarm",this.color1);
		
		var rblArm = this.part(0,-.5,0,aw,al,aw,0,-al,0,								"rblarm",this.color1);
		var rbuArm = this.part(0,-.5,0,aw,al,aw,	(mx-aw)*.5,(my)*-.5,(mz-aw)*-.5,	"rbuarm",this.color1);
		
		var lblArm =	this.part(0,-.5,0,aw,al,aw,0,-al,0,								"lblarm",this.color1);
		var lbuArm =	this.part(0,-.5,0,aw,al,aw,	(mx-aw)*-.5,(my)*-.5,(mz-aw)*-.5,	"lbuarm",this.color1);
	
		var tail =	this.part(0,.5,0,aw,al,aw,		0,my*.5,(mz-aw)*-.5,				"tail",this.color1);
		
		var leye =	this.part(0,0,0,ex,ey,ex,es,0,mz*.5,								"leye",this.color2);
		var reye =	this.part(0,0,0,ex,ey,ex,-es,0,mz*.5,								"reye",this.color2);
		
		var lear =	this.part(0,.5,.5,ex,ey,ex,	mx*.5-(ex/2),(my*.5),(mz*.5)-(ex),					"lear",this.color1);
		var rear =	this.part(0,.5,.5,ex,ey,ex,	-1*((mx*.5)-(ex/2)),(my*.5),(mz*.5)-(ex),			"rear",this.color1);
	
		var bod =	this.part(0,0,0,mx,my,mz,0,0,0,										"bod",this.color1);
		
		this.rt_rfuarm.add(rflArm);			
		this.rt_lfuarm.add(lflArm);
		
		this.rt_rbuarm.add(rblArm);			
		this.rt_lbuarm.add(lblArm);
		
		this.rt_bod.add(rfuArm);
		this.rt_bod.add(lfuArm);
		
		this.rt_bod.add(rbuArm);
		this.rt_bod.add(lbuArm);
		
		this.rt_bod.add(lear);
		this.rt_bod.add(rear);
		
		this.rt_bod.add(tail);
		
		
		this.rt_bod.add(leye);
		this.rt_bod.add(reye);
		
		this.CTRL.add(bod);
		
		this.pos_bod.position.y = (my/2)+(al*2);
	},	
	
	frontSquares:function(obj,sx,sy,sz){
		
		var lboob =	this.part(0,0,0,	sx,sy,sz,	obj.sc_bod.scale.x/4,obj.sc_bod.scale.y/-6,obj.sc_bod.scale.z/2,								"lboob",obj.color1);
		var lnip=	this.part(0,0,0,	sx/5,sy/5,sz+(sz/10),	0,0,0,																				"lnip",obj.color3);
		
		var rboob =	this.part(0,0,0,	sx,sy,sz,	obj.sc_bod.scale.x/-4,obj.sc_bod.scale.y/-6,obj.sc_bod.scale.z/2,								"rboob",obj.color1);
		var rnip=	this.part(0,0,0,	sx/5,sy/5,sz+(sz/10),	0,0,0,																				"rnip",obj.color3);
		
		this.rt_lboob.add(lnip);
		this.rt_rboob.add(rnip);
		obj.rt_bod.add(lboob);
		obj.rt_bod.add(rboob);
		
	},
	
	groundSquares:function(obj,sx,sy,sz){
		
		var big =	this.part(0,-.5,0,	sx,sy,sz,	0,0,0,								"big",obj.color1);
		var med =	this.part(0,-.5,0,	sx-(sx*.5),sy+(sy/10),sx-(sx*.5),	0,sy,0,		"med",obj.color2);
		var small=	this.part(0,-.5,0,	sx-(sx*.8),sy+(sy/9),sx-(sx*.8),	0,sy*2,0,	"small",obj.color3);
		
		this.rt_med.add(small);
		this.rt_big.add(med);
		obj.CTRL.add(big);
		
	},
	
	parentSquares:function(num,sx,sy,sz,ss){
		
		this.big = this.part(0,.5,0,	sx,sy,sz,	0,0,0,   "big",this.color1);
		var i = 1;
		var that = this;
		
		
		stringer(this.big,num,sx,sy,sz,ss);
		
		function stringer(obj,num,sx,sy,sz,ss)
		{		
			
			var move = sy;
			
			if(num>0){
				
				num--;
				move++;
				
				this.big = that.part(0,.5,0,	sx,sy,sz,	0,sy,0,   "big"+num,that.color1);
				this.big.idq = move;
				obj.children[0].add(stringer(this.big,num,sx*ss,sy*ss,sz*ss,ss));
				
				return obj;
			}

		}
		
		
		return this.big;
		
		
	},
	
	branchSquares:function(num,sx,sy,sz,ss){
		
		this.big = this.part(0,.5,0,	sx,sy,sz,	0,0,0,   "big",this.color1);
		var i = 1;
		var that = this;
		var divs = 20;
		
		stringer(this.big,num,sx,sy,sz,ss,divs);
		
		function stringer(obj,num,sx,sy,sz,ss,divs)
		{		
			
			var move = sy;
			
			if(num>0){
				
				num--;
				move++;
				
				this.big = that.part(0,.5,0,	sx,sy,sz,	0,sy,0,   "big"+num,that.color1);
				this.big.idq = move;
				//console.log(obj);
				//obj.children[0] is "rt" for rotate
				//children[1] is the root of the next square
				//obj itself is 'pos'
				//divs = Math.round(divs*.95);
				//obj.children[0].children[0].children[0].rotation.x = Math.random()*Math.PI;
				obj.children[0].add(stringer(this.big,num,sx*ss,sy*ss,sz*ss,ss,divs));
				//console.log(obj);
				//obj.rotation.x = (.3);
				console.log(divs);
				
				
				
				ss*=.97;
				
				if(num%divs==0 && num >0){
					
					obj.children[0].add(stringer(this.big,Math.round(num/2),sx*ss,sy*ss,sz*ss,ss,divs));
					obj.children[0].children[2].rotation.x = (.5);
					obj.children[0].add(stringer(this.big,Math.round(num/2),sx*ss,sy*ss,sz*ss,ss,divs));
					obj.children[0].children[3].rotation.x = (-.5);
					
				//obj.rotation.x = (.3);
				}
				
				if(num==5 && num >0){
					
					obj.children[0].add(stringer(this.big,Math.round(num/2),sx*ss,sy*ss,sz*ss,ss,divs));
					//obj.children[0].children[2].rotation = new THREE.Vector3(Math.random()*Math.PI/2,Math.random()*Math.PI/2,Math.random()*Math.PI/4);
					obj.children[1].scale.y = 4;
					obj.children[1].rotation.x = 2;
					
				//obj.rotation.x = (.3);
				}
				return obj;
			}
		}
		return this.big;
	},
	
	frontTail:function(obj,sx,sy){
		
		var weenie =	this.part(0,-.5,0,	sx,sy,sx,	0,(obj.sc_bod.scale.y/-2),(obj.sc_bod.scale.z/2)-sx/2,								"dk",obj.color1);
		
		obj.rt_bod.add(weenie);
		
	},
	
	hair:function(obj,sy){
		//console.log(this.color4);
		this.hair =	this.part(0,.5,0,	obj.sc_bod.scale.x,sy,obj.sc_bod.scale.z,	0,(obj.sc_bod.scale.y/2),0,								"hair",obj.color4);
		
		obj.rt_bod.add(this.hair);
		
	},
	
	dude:function(mx,my,mz,al,aw,ll,lw,ls,ex,ey,es) {
	
		this.CTRL.mx = mx;
		this.CTRL.my = my;
		this.CTRL.mz = mz;
		
		
		//this.CTRL = new THREE.Object3D();
		this.CTRL.name = "CTRL";
		
		this[  this.CTRL.name ] = this.CTRL;
		
		//(mesh offset xyz, scale xyz, controller position xyz, name, color)
		var rlArm = this.part(0,-.5,0,aw,al,aw,0,-al,0,"rlarm",this.color1);
		var ruArm = this.part(0,-.5,0,aw,al,aw,(mx+(aw))*.5,0,0,"ruarm",this.color1);
		
		var llArm =	this.part(0,-.5,0,aw,al,aw,0,-al,0,"llarm",this.color1);
		var luArm =	this.part(0,-.5,0,aw,al,aw,(mx+(aw))*-.5,0,0,"luarm",this.color1);
		
		var lLeg =	this.part(0,-.5,0,lw,ll,lw,ls,-(my*.5),0,"lleg",this.color1);
		var rLeg =	this.part(0,-.5,0,lw,ll,lw,-ls,-(my*.5),0,"rleg",this.color1);
		
		var leye =	this.part(0,0,0,ex,ey,ex,es,0,mz*.5,"leye",this.color2);
		var reye =	this.part(0,0,0,ex,ey,ex,-es,0,mz*.5,"reye",this.color2);
	
		var bod =	this.part(0,0,0,mx,my,mz,0,0,0,"bod",this.color1);
		
		this.rt_ruarm.add(rlArm);			
		this.rt_luarm.add(llArm);
		
		this.rt_bod.add(ruArm);
		this.rt_bod.add(luArm);
		
		this.rt_bod.add(lLeg);
		this.rt_bod.add(rLeg);
		
		this.rt_bod.add(leye);
		this.rt_bod.add(reye);
		
		this.CTRL.add(bod);
		
		this.pos_bod.position.y = (my/2)+(ll);
	}
	
}
