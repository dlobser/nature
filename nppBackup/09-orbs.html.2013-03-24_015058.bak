<!DOCTYPE html>
<html lang="en">
	<head>
		<link rel="stylesheet" href="css/app.css" />
		<title>three.js webgl - orbit controls</title>
		<meta charset="utf-8">
		<meta name="viewport" content="width=device-width, user-scalable=no, minimum-scale=1.0, maximum-scale=1.0">
	</head>

	<body>
		<div id="container"></div>
		<div id="info">
			<a href="http://threejs.org" target="_blank">three.js</a> - orbit controls example
		</div>

		<script src="js/three/build/three.min.js"></script>

		<script src="js/three/js/controls/OrbitControls.js"></script>

		<script src="js/three/js/Detector.js"></script>
		<script src="js/three/js/libs/stats.min.js"></script>
		<script type="text/javascript" src="js/libs/THREEx.screenshot.js"></script>

		
		<script type="text/javascript" src="js/dat/dat.gui.min.js"></script>

		<script>
		
		/*
		
		1 -z
		2 -x
		3 +z
		4 +x
		5 +y
		6 -y
		
		
		
		*/
		
			//dat.gui adds controls----------------------------

			/*
			var text;
			
				var starfield = function()
			{
				this.speed = 0.1;
				this.size = 1;
			};

			//window.onload = function() {
				text = new starfield();
				var gui = new dat.GUI();
				// gui.add(text, 'message');
				gui.add(text, 'speed', 0, 500);
				gui.add(text, 'size', -5, 5);
			//};

		*/

			
			//dat.gui adds controls----------------------------
			
			//console.log(text);

			if ( ! Detector.webgl ) Detector.addGetWebGLMessage();

			var container, stats;
			var camera, controls, scene, renderer;
			var cross;			
			var things = [];
			var lines = [];
			var man;
			var bMaterial,material;
			
			var counter = 0;
			
			var cameraCube, sceneCube;
			
			var repel = 20;
			var numThings = 100;
			var noiseField;
			
			init();
			animate();

			function init() {
				

				noiseField = new makeForce(0,0,0,0,-5,0,200);
				//console.log(noiseField.pos);
				
				//console.log(noiseField);

				camera = new THREE.PerspectiveCamera( 60, window.innerWidth / window.innerHeight, 1, 1000 );
				camera.position.z = -300;
				camera.position.y = 70;
				
				cameraCube = new THREE.PerspectiveCamera( 60, window.innerWidth / window.innerHeight, 1, 100000 );

				controls = new THREE.OrbitControls( camera );
				controls.addEventListener( 'change', render );

				scene = new THREE.Scene();
				sceneCube = new THREE.Scene();

				
				scene.fog = new THREE.FogExp2( 0xffffff, 0.001 );
				// world

				addGeo();
				makeLines();
				
				//console.log("noisefield.force: " + noiseField.force.y);


				// lights

				light = new THREE.DirectionalLight( 0xffffff );
				light.position.set( 1, 1, 1 );
				scene.add( light );
	
				light = new THREE.DirectionalLight( 0x002288 );
				light.position.set( -1, -1, -1 );
				scene.add( light );

				light = new THREE.AmbientLight( 0x222222 );
				scene.add( light );


				// renderer

				renderer = new THREE.WebGLRenderer( { antialias: true,preserveDrawingBuffer   : true } );
				renderer.setClearColor( scene.fog.color, 1 );
				renderer.setSize( window.innerWidth, window.innerHeight );
				
				//renderer = new THREE.WebGLRenderer();

				container = document.getElementById( 'container' );
				container.appendChild( renderer.domElement );
				
				//stats will display an fps counter in the upper left
				/*
				stats = new Stats();
				stats.domElement.style.position = 'absolute';
				stats.domElement.style.top = '0px';
				stats.domElement.style.zIndex = 100;
				container.appendChild( stats.domElement );
				*/
				//

				window.addEventListener( 'resize', onWindowResize, false );
				THREEx.Screenshot.bindKey(renderer);


			}
			
			function littleMan(){
			
				var geometry = new THREE.CubeGeometry( 10,10,10,1,1,1 );
				var material =  new THREE.MeshLambertMaterial( { color:0xffffff, shading: THREE.FlatShading } );
				
				var mesh = new THREE.Mesh( geometry, material );
				var pos = new THREE.Vector3(0,0,0);
				var zeroVec = new THREE.Vector3(0,0,0);

				mesh.position = pos;
				mesh.velocity = zeroVec;
				mesh.acceleration = zeroVec;
				mesh.damp = .9;
				
				mesh.updateMatrix();
				mesh.matrixAutoUpdate = true;
					
				scene.add( mesh );
				things.push(mesh);	
				
			}
			
			function addGeo(){
			//( radius, widthSegments, heightSegments, phiStart, phiLength, thetaStart, thetaLength ) {
				var geometry = new THREE.SphereGeometry( 10,20,20 );
				/*
				material2 = {norm:new THREE.MeshNormalMaterial,depth:new THREE.MeshDepthMaterial}
				bMaterial = material[ "depth" ];

				material.shading = THREE.SmoothShading;
				//var material =  new THREE.MeshLambertMaterial( { color:0xffffff, shading: THREE.FlatShading } );
				/*
		
		1 -z
		2 -x
		3 +z
		4 +x
		5 +y
		6 -y
		
		
		
		*/
				
				var path = "textures/bmap.";
				var format = '.jpg';
				var urls = [
					path + '04' + format, path + '02' + format,
					path + '05' + format, path + '06' + format,
					path + '01' + format, path + '03' + format
				];

				var textureCube = THREE.ImageUtils.loadTextureCube( urls );
				var material = new THREE.MeshBasicMaterial( { color: 0xffffff, envMap: textureCube } );


				for ( var i = 0; i < numThings; i ++ ) {

					var mesh = new THREE.Mesh( geometry, material );
					var pos = new THREE.Vector3( ( Math.random() - 0.5 ) * 300, ( Math.random() - 0.5 ) * 1, ( Math.random() - 0.5 ) * 300);
					var zeroVec = new THREE.Vector3(0,0,0);
					var rs = ( Math.random() );
					var scalar = new THREE.Vector3( rs,rs,rs);
					
					/*
					var parameters{
						this.height : 50;
						this.bevelThickness = 10;
						this.bevelSize = 8;
						this.bevelEnabled = false;
					}
					
					
					var text3d = new THREE.TextGeometry( "hi",parameters );
	*/				mesh.scale = scalar;
					mesh.position = pos;
					mesh.velocity = zeroVec;
					mesh.acceleration = zeroVec;
					mesh.damp = .9;
					
					mesh.updateMatrix();
					mesh.matrixAutoUpdate = true;
						
					scene.add( mesh );
					//scene.add( text3d );
					things.push(mesh);
					//things.push(text3d);

				}
				
				var textureCube = THREE.ImageUtils.loadTextureCube( urls );
				var material = new THREE.MeshBasicMaterial( { color: 0xffffff, envMap: textureCube } );
				
				var shader = THREE.ShaderLib[ "cube" ];
				shader.uniforms[ "tCube" ].value = textureCube;

				var material = new THREE.ShaderMaterial( {

					fragmentShader: shader.fragmentShader,
					vertexShader: shader.vertexShader,
					uniforms: shader.uniforms,
					depthWrite: false,
					side: THREE.BackSide

				} ),

				mesh = new THREE.Mesh( new THREE.CubeGeometry( 100, 100, 100 ), material );
				sceneCube.add( mesh );

				
				//things.others = things;
			}

			function onWindowResize() {

				camera.aspect = window.innerWidth / window.innerHeight;
				camera.updateProjectionMatrix();
				
				cameraCube.aspect = window.innerWidth / window.innerHeight;
				cameraCube.updateProjectionMatrix();
				
				
				camera.lookAt( scene.position );
				cameraCube.rotation.copy( camera.rotation );


				renderer.setSize( window.innerWidth, window.innerHeight );

			

			}

			function animate() {
			
			
				render();
				counter = 140;
				//	console.log(counter);
				moveThings();
				drawLines();
				//Mover();
				requestAnimationFrame( animate );
				controls.update();
				
				
				var material2 = new THREE.MeshNormalMaterial;
				var material = new THREE.MeshDepthMaterial;
				
				bMaterial = material2;
				
				//console.log(things[0].material);
				
				if (counter > 100){
					scene.fog.color.set(0xffffff);
				}
				else
					scene.fog.color.set(0xffffff);
				if(counter>200)
					counter = 0;
				
			}
			
			function makeForce(a,b,c,d,e,f,g){
			
				this.pos = new THREE.Vector3(a,b,c);
				this.force = new THREE.Vector3(d,e,f);
				this.dist = g;
			
			}
			
			function forceField (thing, forcePos, force, forceDrop){
			
				//var diffVec = THREE.Vector3.prototype.subVectors(thing.position,force.position);
				//diffVec.normalize();
				//diffVec.multiplyScalar(dist/10);
				//thing.position.add(diffVec);	
				
				//var returnVec = new THREE.Vector3(0,0,0);
				
				var newZero = THREE.Vector3(0,0,0);
				
				//console.log("force: " + forcePos.x + forcePos.y + forcePos.z);

				var dist = thing.position.distanceTo(forcePos);
				//console.log(dist);
				var forceVec = force;
				var newDist;
				//forceVec.divideScalar(dist);
				
				if(dist<forceDrop){
				
					//newDist = map_range(dist, 0, forceDrop, 1, 0);
					
					//if(newDist <0){
					//	newDist = 0;
					//}
					//console.log(dist);
					//thing.velocity.add(forceVec);
					
					if(dist<forceDrop){
					forceVec.multiplyScalar(1);		
					thing.velocity.add(forceVec);
					}
				}
				
				else{
					
					newDist = 0;
					forceVec.multiplyScalar(newDist);
					thing.velocity.multiply(forceVec);
					thing.acceleration.multiply(forceVec);
				
				}
				
				
			
			}
			
			function map_range(value, low1, high1, low2, high2) {
				return low2 + (high2 - low2) * (value - low1) / (high1 - low1);
			}
			
			function makeLines(){
			
			var material = new THREE.LineBasicMaterial({
				color: 0x557799,
			});
			
			for (var i = 0 ; i< things.length ; i++){
				var geometry = new THREE.Geometry();
				
			
				geometry.vertices.push(new THREE.Vector3(-10, 0, 0));
				geometry.vertices.push(new THREE.Vector3(10, 0, 0));
				
				var line = new THREE.Line(geometry, material);
				
				line.updateMatrix();
				line.matrixAutoUpdate = true;
				line.geometry.__dirtyVertices = true;
				line.geometry.__dirtyNormals = true;
				
				lines.push(line);
				scene.add(line);
				
			
			}
			
			}
			
			function drawLines(){
			//console.log(lines[0].geometry.vertices[0]);
			//console.log(lines[0].geometry.vertices[1]);
			//console.log(noiseField.pos);
				
				for(var i = 1 ; i<lines.length ; i++){
				
					var thing = things[i];
					var other = things[i-1];
					
					var line = lines[i];
				
					var zeroVec = new THREE.Vector3(0,0,0);
					var thisVec = thing.position;
					
					lines[i].geometry.vertices[0] = other.position;
					lines[i].geometry.vertices[1] = thing.position;
					
					lines[i].geometry.verticesNeedUpdate = true;
					
					line.updateMatrix();
					
					/*
					var dot1 = line.geometry.vertices.shift();
					
					dot1 = zeroVec;
					line.geometry.vertices.push(dot1);
					
					
					var dot1 = line.geometry.vertices.shift();
					//console.log(dot1);
					dot1 = thing.position;
					
					line.geometry.vertices.push(dot1);
					
					lines.push(line);
					*/
				}
			}
			
			
			
			function moveThings(){
			
				//this.go = false;
				
				//if
				
				//noiseField.dist = text.speed;
				//noiseField.force.y = text.size;
			
			
				for ( var i = 0; i < things.length; i ++ ) {
				
					var thing = things[i];
				
					thing.acceleration = new THREE.Vector3( ( Math.random() - 0.5 ) * .131, ( Math.random() - 0.5 ) * .131, ( Math.random() - 0.5 ) * .131);	
					

					thing.position.add(thing.velocity);
					thing.velocity.add(thing.acceleration);
					thing.velocity.multiplyScalar(thing.damp);
					if(thing.acceleration.y < -1){
					//	thing.acceleration.y = -1;
					}
					
					var count = 0;//things.length;
					
					//if(i ){
					
					var dist = thing.position.distanceTo(noiseField.pos);
					//var rng = map_range(dist, 0, noiseField.dist, 1, 0);
						//if(rng > 0){
							//console.log("id: " + thing.id + " dist: " + rng);
					//	}
						//}
					/*
					if(dist < noiseField.dist){	
						var newDist = map_range(dist, 0, noiseField.dist, 1, 0);
						//thing.velocity.add(noiseField.force);
						//console.log("noisefield.force: " + noiseField.force.y);
						var forceVec = clone(noiseField);
						//var forceVec = noiseField;
						
						if(dist<noiseField.dist){
							//console.log("noisefield.force: " + noiseField.force.y);
							forceVec.force.multiplyScalar(newDist);		
							console.log("forceVec: " + forceVec.y);
							
							//if(thing.acceleration.y > -.1){
							var zeroVec = new THREE.Vector3(0,0,0);
							thing.acceleration = zeroVec;
							//forceVec.force.normalize();
							if(thing.acceleration.length() > 1){
							//	thing.acceleration.normalize();
							}
							thing.position.add(forceVec.force);
							//}
						}
					}
					
					else{
					
						var newDist = 0;
						//forceVec.multiplyScalar(newDist);
						thing.velocity.multiplyScalar(newDist);
						thing.acceleration.multiplyScalar(newDist);
				
					}
				
					*/
					
					//forceField(thing, noiseField.pos, noiseField.force, noiseField.dist);
					
					for ( var j = 0; j < things.length ; j ++ ) {
						
						

						
					
						if ( j==i && j< things.length-1){
							j++;	
						}
						
						if (i==things.length-1 && j==things.length-1){
						//	return;
						}
						
						var other = things[j];
						
						//console.log(count);
						
						var zeroVec = new THREE.Vector3(0,0,0);
						
						var dist = thing.position.distanceTo(other.position);
						
						other.acceleration.multiplyScalar(.99);
											
						if ( dist < 100 && dist > 50){
						
							//thing.acceleration = new THREE.Vector3( ( Math.random() - 0.5 ) * 2, ( Math.random() - 0.5 ) * 2, ( Math.random() - 0.5 ) * 2);	
							//thing.rotation.x += .1;
							var diffVec = THREE.Vector3.prototype.subVectors(thing.position,other.position);
							diffVec.normalize();
							diffVec.multiplyScalar((dist/200)*-1);
							thing.acceleration.add(diffVec);							
							
						}
						
						if(dist<=50){
							var diffVec = THREE.Vector3.prototype.subVectors(thing.position,other.position);
							var diffVec2 = THREE.Vector3.prototype.subVectors(thing.position,other.position);
							diffVec.normalize();
							diffVec.multiplyScalar((dist/20)*1);
							diffVec.multiplyScalar((dist/20)*-1);
							thing.acceleration.add(diffVec);
							other.acceleration.add(diffVec2);								
						
						}
												
						
						else{
							count++;
							
						}
						
						if(count >= things.length-1){
							//thing.acceleration = zeroVec;
							//thing.velocity.multiplyScalar(0);
							//thing.done = true;
						}
						
					}
						
					
					
				}
				
				
			}
			
			function render() {
				//moveThings();
				renderer.render( sceneCube, cameraCube );

				renderer.render( scene, camera );
				//stats.update();
				

			}
			
			function Mover(){
				//set up
				this.location = new THREE.Vector3(0,0,0);
				this.velocity = new THREE.Vector3(0,0,0);
				this.acceleration = new THREE.Vector3(0.01,0.01,0.01);
				
				
				//console.log(this.velocity);
				this.step = function(){
					this.velocity.addSelf(this.acceleration);
					this.location.addSelf(this.velocity);
					this.mesh.position = this.location;
					//this.mesh1.position = this.location;
					checkBounds(this);
					limit(this.velocity ,10);
					this.acceleration = new THREE.Vector3((Math.random()-0.5)/100,(Math.random()-0.5)/100,(Math.random()-0.5)/100);
			};
		}
		
		function clone(src) {
  function mixin(dest, source, copyFunc) {
    var name, s, i, empty = {};
    for(name in source){
      // the (!(name in empty) || empty[name] !== s) condition avoids copying properties in "source"
      // inherited from Object.prototype.   For example, if dest has a custom toString() method,
      // don't overwrite it with the toString() method that source inherited from Object.prototype
      s = source[name];
      if(!(name in dest) || (dest[name] !== s && (!(name in empty) || empty[name] !== s))){
        dest[name] = copyFunc ? copyFunc(s) : s;
      }
    }
    return dest;
  }

  if(!src || typeof src != "object" || Object.prototype.toString.call(src) === "[object Function]"){
    // null, undefined, any non-object, or function
    return src;  // anything
  }
  if(src.nodeType && "cloneNode" in src){
    // DOM Node
    return src.cloneNode(true); // Node
  }
  if(src instanceof Date){
    // Date
    return new Date(src.getTime());  // Date
  }
  if(src instanceof RegExp){
    // RegExp
    return new RegExp(src);   // RegExp
  }
  var r, i, l;
  if(src instanceof Array){
    // array
    r = [];
    for(i = 0, l = src.length; i < l; ++i){
      if(i in src){
        r.push(clone(src[i]));
      }
    }
    // we don't clone functions for performance reasons
    //    }else if(d.isFunction(src)){
    //      // function
    //      r = function(){ return src.apply(this, arguments); };
  }else{
    // generic objects
    r = src.constructor ? new src.constructor() : {};
  }
  return mixin(r, src, clone);

}



		</script>

	</body>
</html>
